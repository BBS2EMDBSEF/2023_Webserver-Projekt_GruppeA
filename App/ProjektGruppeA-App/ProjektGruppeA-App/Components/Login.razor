@page "/login"
@using Microsoft.AspNetCore.Identity
@using ProjektGruppeA_App.Models;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<RadzenStack 
    Gap="0" 
    Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" 
    Style="width: 100%; max-width: 400px; overflow: hidden;">
    <RadzenCard 
        Class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" 
        style="text-align: center;">
        <RadzenText 
            TextStyle="TextStyle.DisplayH3" 
            TagName="TagName.H2" Class="rz-color-white rz-mb-0">
            Login
        </RadzenText>
    </RadzenCard>
    <RadzenCard Class="rz-shadow-0 rz-p-12">
        <RadzenTemplateForm 
            Data=@("SimpleLogin")>
            <RadzenLogin 
                AllowRegister="false" 
                AllowResetPassword="true"
                Login="@(args => LoginUser(args))"/>
        </RadzenTemplateForm>
    </RadzenCard>
</RadzenStack>

@code {
    private async Task LoginUser(LoginArgs args)
    {
        //var user = await UserManager.FindByNameAsync(args.Username);
        var user = await UserManager.FindByNameAsync(args.Username);
        if (user != null)
        {
            var result = await SignInManager.PasswordSignInAsync(user.UserName, args.Password, isPersistent: false, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                //NavigationManager.NavigateTo("/"); // Weiterleitung nach erfolgreichem Login
            }
            else
            {

                // Handle failed login
            }
        }
        else
        {
            
        }

    }
}

@* @page "/login"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using ProjektGruppeA_App.Models; 
@using System.ComponentModel.DataAnnotations;

<h3>Login</h3>

<AuthorizeView>
    <Authorized>
        Hallo Welt!
    </Authorized>

</AuthorizeView>
<EditForm Model="loginModel" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="InputEmail">Email</label>
        <InputText id="InputEmail" @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="() => loginModel.Email" />
    </div>

    <div class="form-group">
        <label for="InputPassword">Password</label>
        <InputText id="InputPassword" @bind-Value="loginModel.Password" class="form-control" />
        <ValidationMessage For="() => loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
@t

@code {
    private LoginModel loginModel = new LoginModel();

    [Inject]
    private SignInManager<User> signInManager { get; set; }
    string t;
    private async Task LoginUser()
    {
        var result = await signInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            t = "HAllo";
            // Benutzer erfolgreich eingeloggt
            // Fügen Sie hier Ihre Weiterleitungslogik hinzu
        }
        else
        {
            // Login fehlgeschlagen
            loginModel.Password = string.Empty; // Passwort-Feld zurücksetzen
        }
    }

    private class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
} *@

