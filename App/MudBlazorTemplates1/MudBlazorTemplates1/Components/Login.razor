@page "/login"

@inject UserService _userService
@inject IJSRuntime _jsRuntime
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject UserManager<User> _userManager
@inject RoleManager<IdentityRole> _roleManager


<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <h3>Login</h3>
            <MudCardContent>
                <MudTextField 
                    Label="Username" 
                    @bind-Value="_loginArgs.Username"
                    For="@(() => _loginArgs.Username)" />
                <MudTextField 
                    Label="Password" 
                    Class="mt-3"
                    @bind-Value="_loginArgs.Password" 
                    For="@(() => _loginArgs.Password)" 
                    InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton 
                    ButtonType="ButtonType.Submit" 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    Class="ml-auto"
                    OnClick="() => OnValidSubmit()">
                        Anmelden
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    private LoginArgs _loginArgs = new LoginArgs();
    public async Task AuthenticateUserAsync()
    {

        User? user = await _userManager.FindByNameAsync(_loginArgs.Username);
        if(user == null)
        {
            LoginError();
        }
        if(await _userManager.CheckPasswordAsync(user, _loginArgs.Password))
        {
            var roles = await _userManager.GetRolesAsync(user);
            if(roles.Count == 1)
            {
                var projektAuthState = (ProjektAuthenticationstateProvider)_authStateProvider;
                await projektAuthState.UpdateAuthenticationState(new UserSession
                    {
                        UserName = _loginArgs.Username,
                        Role = roles.First()
                    });
                _navigationManager.NavigateTo("/",true);
                //StateHasChanged();
            }else
            {
                LoginError();
            }
        }
        else
        {
            LoginError();
        }

    }
    public async void LoginError()
    {
        await _jsRuntime.InvokeVoidAsync("alert", "Ubgültige AnmeldeDaten");
    }
    private async void OnValidSubmit()
    {
        await AuthenticateUserAsync();
        // StateHasChanged();
    }
}
